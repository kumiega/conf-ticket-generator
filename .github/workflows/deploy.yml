name: Deploy

on:
  workflow_dispatch:
    inputs:
      deploy-netlify:
        type: boolean
        description: Enable Netlify deployment
        default: true
      deploy-vercel:
        type: boolean
        description: Enable Vercel deployment
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest 
    env:
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Configure node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps
        
      - name: Build app
        run: pnpm run build

      - name: Run E2E tests
        run: pnpm run test:e2e

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        if: ${{ inputs.deploy-netlify }}
        with:
          publish-dir: './dist'
          production-branch: master
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: 'Deploy from GitHub Actions'

      - name: Install Vercel CLI
        if: ${{ inputs.deploy-vercel }}
        run: npm install --global vercel@canary

      - name: Pull Vercel Environment Information
        if: ${{ inputs.deploy-vercel }}
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build for Vercel
        if: ${{ inputs.deploy-vercel }}
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        if: ${{ inputs.deploy-vercel }}
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
  